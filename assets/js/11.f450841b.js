(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{149:function(e,t,s){"use strict";s.r(t);var i=s(0),o=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"promise对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#promise对象","aria-hidden":"true"}},[e._v("#")]),e._v(" "),s("code",[e._v("Promise")]),e._v("对象")]),e._v(" "),s("ul",[s("li",[e._v("如果是多个 "),s("code",[e._v("THEN")]),e._v(" 调用，不是向我们想象的依次把增加的方法执行，异步操作成功或者失败，先把第一个 "),s("code",[e._v("THEN")]),e._v(" 中的方法执行，每执行一个 "),s("code",[e._v("THEN")]),e._v(" 会返回一个新的 "),s("code",[e._v("Promise")]),e._v(" 实例，这个实例管控的是第一个 "),s("code",[e._v("THEN")]),e._v(" 中方法执行的是成功还是失败")])])])}],!1,null,null,null);o.options.__file="promise.md";t.default=o.exports}}]);